
// Generated by dojo-bindgen on Sat, 28 Sep 2024 06:20:56 +0000. Do not modify this file manually.
// Import the necessary types from the recs SDK
// generate again with `sozo build --typescript` 
import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;



// Type definition for `dojo::model::layout::Layout` enum
export type Layout = { type: 'Fixed'; value: RecsType.NumberArray; } | { type: 'Struct'; value: RecsType.StringArray; } | { type: 'Tuple'; value: RecsType.StringArray; } | { type: 'Array'; value: RecsType.StringArray; } | { type: 'ByteArray'; } | { type: 'Enum'; value: RecsType.StringArray; };

export const LayoutDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess::types::profile::ProfilePicType` enum
export type ProfilePicType = { type: 'Undefined'; } | { type: 'Native'; } | { type: 'External'; };

export const ProfilePicTypeDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `dojo::model::layout::FieldLayout` struct
export interface FieldLayout {
    selector: BigInt;
    layout: Layout;
    
}
export const FieldLayoutDefinition = {
    selector: RecsType.BigInt,
    layout: LayoutDefinition,
    
};

// Type definition for `core::byte_array::ByteArray` struct
export interface ByteArray {
    data: String[];
    pending_word: BigInt;
    pending_word_len: Number;
    
}
export const ByteArrayDefinition = {
    data: RecsType.StringArray,
    pending_word: RecsType.BigInt,
    pending_word_len: RecsType.Number,
    
};

// Type definition for `rl_chess::models::index::Player` struct
export interface Player {
    address: BigInt;
    name: BigInt;
    profile_pic_type: ProfilePicType;
    profile_pic_uri: Number;
    timestamp: Number;
    
}
export const PlayerDefinition = {
    address: RecsType.BigInt,
    name: RecsType.BigInt,
    profile_pic_type: ProfilePicTypeDefinition,
    profile_pic_uri: RecsType.Number,
    timestamp: RecsType.Number,
    
};


// Type definition for `rl_chess::types::color::Color` enum
export type Color = { type: 'None'; } | { type: 'White'; } | { type: 'Black'; };

export const ColorDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess::models::index::Board` struct
export interface Board {
    game_id: BigInt;
    whites: Number;
    blacks: Number;
    pawns: Number;
    rooks: Number;
    knights: Number;
    bishops: Number;
    queens: Number;
    kings: Number;
    wcp: Number;
    wcr: Number;
    wck: Number;
    wcb: Number;
    wcq: Number;
    bcp: Number;
    bcr: Number;
    bck: Number;
    bcb: Number;
    bcq: Number;
    side_to_move: Color;
    castling_rights: Number;
    en_passant: Number;
    halfmove_clock: Number;
    fullmove_number: Number;
    last_move_time: Number;
    last_move_integer: Number;
    
}
export const BoardDefinition = {
    game_id: RecsType.BigInt,
    whites: RecsType.Number,
    blacks: RecsType.Number,
    pawns: RecsType.Number,
    rooks: RecsType.Number,
    knights: RecsType.Number,
    bishops: RecsType.Number,
    queens: RecsType.Number,
    kings: RecsType.Number,
    wcp: RecsType.Number,
    wcr: RecsType.Number,
    wck: RecsType.Number,
    wcb: RecsType.Number,
    wcq: RecsType.Number,
    bcp: RecsType.Number,
    bcr: RecsType.Number,
    bck: RecsType.Number,
    bcb: RecsType.Number,
    bcq: RecsType.Number,
    side_to_move: ColorDefinition,
    castling_rights: RecsType.Number,
    en_passant: RecsType.Number,
    halfmove_clock: RecsType.Number,
    fullmove_number: RecsType.Number,
    last_move_time: RecsType.Number,
    last_move_integer: RecsType.Number,
    
};


// Type definition for `rl_chess::types::gamestate::GameState` enum
export type GameState = { type: 'Null'; } | { type: 'Awaiting'; } | { type: 'Withdrawn'; } | { type: 'Accepted'; } | { type: 'Expired'; } | { type: 'InProgress'; } | { type: 'Resolved'; } | { type: 'Draw'; };

export const GameStateDefinition = {
    type: RecsType.String,
    value: RecsType.String
};
        
// Type definition for `rl_chess::models::index::Game` struct
export interface Game {
    game_id: BigInt;
    game_format_id: Number;
    w_turn_expiry_time: Number;
    b_turn_expiry_time: Number;
    invite_expiry: Number;
    room_owner_address: BigInt;
    invitee_address: BigInt;
    white_player_address: BigInt;
    black_player_address: BigInt;
    game_state: GameState;
    owner_ready: Boolean;
    invitee_ready: Boolean;
    room_start: Number;
    room_end: Number;
    w_last_move_time: Number;
    b_last_move_time: Number;
    w_total_time_left: Number;
    b_total_time_left: Number;
    side_to_move: Color;
    result: Number;
    winner: BigInt;
    
}
export const GameDefinition = {
    game_id: RecsType.BigInt,
    game_format_id: RecsType.Number,
    w_turn_expiry_time: RecsType.Number,
    b_turn_expiry_time: RecsType.Number,
    invite_expiry: RecsType.Number,
    room_owner_address: RecsType.BigInt,
    invitee_address: RecsType.BigInt,
    white_player_address: RecsType.BigInt,
    black_player_address: RecsType.BigInt,
    game_state: GameStateDefinition,
    owner_ready: RecsType.Boolean,
    invitee_ready: RecsType.Boolean,
    room_start: RecsType.Number,
    room_end: RecsType.Number,
    w_last_move_time: RecsType.Number,
    b_last_move_time: RecsType.Number,
    w_total_time_left: RecsType.Number,
    b_total_time_left: RecsType.Number,
    side_to_move: ColorDefinition,
    result: RecsType.Number,
    winner: RecsType.BigInt,
    
};


// Type definition for `rl_chess::models::index::History` struct
export interface History {
    game_id: BigInt;
    fen: String;
    move_history_string: String;
    move_history_integer: String;
    last_move_from: Number;
    last_move_to: Number;
    
}
export const HistoryDefinition = {
    game_id: RecsType.BigInt,
    fen: RecsType.String,
    move_history_string: RecsType.String,
    move_history_integer: RecsType.String,
    last_move_from: RecsType.Number,
    last_move_to: RecsType.Number,
    
};


// Type definition for `rl_chess::models::index::Format` struct
export interface Format {
    format_id: Number;
    description: BigInt;
    turn_expiry: Number;
    total_time_per_side: Number;
    total_time_string: BigInt;
    increment: Number;
    available: Boolean;
    
}
export const FormatDefinition = {
    format_id: RecsType.Number,
    description: RecsType.BigInt,
    turn_expiry: RecsType.Number,
    total_time_per_side: RecsType.Number,
    total_time_string: RecsType.BigInt,
    increment: RecsType.Number,
    available: RecsType.Boolean,
    
};


export function defineContractComponents(world: World) {
    return {

        // Model definition for `rl_chess::models::index::Player` model
        Player: (() => {
            return defineComponent(
                world,
                {
                    address: RecsType.BigInt,
                    name: RecsType.BigInt,
                    profile_pic_type: RecsType.String,
                    profile_pic_uri: RecsType.Number,
                    timestamp: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess",
                        name: "Player",
                        types: ["ContractAddress", "felt252", "ProfilePicType", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess::models::index::Board` model
        Board: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    whites: RecsType.Number,
                    blacks: RecsType.Number,
                    pawns: RecsType.Number,
                    rooks: RecsType.Number,
                    knights: RecsType.Number,
                    bishops: RecsType.Number,
                    queens: RecsType.Number,
                    kings: RecsType.Number,
                    wcp: RecsType.Number,
                    wcr: RecsType.Number,
                    wck: RecsType.Number,
                    wcb: RecsType.Number,
                    wcq: RecsType.Number,
                    bcp: RecsType.Number,
                    bcr: RecsType.Number,
                    bck: RecsType.Number,
                    bcb: RecsType.Number,
                    bcq: RecsType.Number,
                    side_to_move: RecsType.String,
                    castling_rights: RecsType.Number,
                    en_passant: RecsType.Number,
                    halfmove_clock: RecsType.Number,
                    fullmove_number: RecsType.Number,
                    last_move_time: RecsType.Number,
                    last_move_integer: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess",
                        name: "Board",
                        types: ["u128", "u64", "u64", "u64", "u64", "u64", "u64", "u64", "u64", "u8", "u8", "u8", "u8", "u8", "u8", "u8", "u8", "u8", "u8", "Color", "u8", "u8", "u8", "u16", "u64", "u64"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess::models::index::Game` model
        Game: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    game_format_id: RecsType.Number,
                    w_turn_expiry_time: RecsType.Number,
                    b_turn_expiry_time: RecsType.Number,
                    invite_expiry: RecsType.Number,
                    room_owner_address: RecsType.BigInt,
                    invitee_address: RecsType.BigInt,
                    white_player_address: RecsType.BigInt,
                    black_player_address: RecsType.BigInt,
                    game_state: RecsType.String,
                    owner_ready: RecsType.Boolean,
                    invitee_ready: RecsType.Boolean,
                    room_start: RecsType.Number,
                    room_end: RecsType.Number,
                    w_last_move_time: RecsType.Number,
                    b_last_move_time: RecsType.Number,
                    w_total_time_left: RecsType.Number,
                    b_total_time_left: RecsType.Number,
                    side_to_move: RecsType.String,
                    result: RecsType.Number,
                    winner: RecsType.BigInt,
                },
                {
                    metadata: {
                        namespace: "rl_chess",
                        name: "Game",
                        types: ["u128", "u16", "u64", "u64", "u64", "ContractAddress", "ContractAddress", "ContractAddress", "ContractAddress", "GameState", "bool", "bool", "u64", "u64", "u64", "u64", "u64", "u64", "Color", "u8", "ContractAddress"],
                        customTypes: [],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess::models::index::History` model
        History: (() => {
            return defineComponent(
                world,
                {
                    game_id: RecsType.BigInt,
                    fen: RecsType.StringDefinition,
                    move_history_string: RecsType.StringDefinition,
                    move_history_integer: RecsType.StringDefinition,
                    last_move_from: RecsType.Number,
                    last_move_to: RecsType.Number,
                },
                {
                    metadata: {
                        namespace: "rl_chess",
                        name: "History",
                        types: ["u128", "u8", "u8"],
                        customTypes: ["ByteArray", "ByteArray", "ByteArray"],
                    },
                }
            );
        })(),

        // Model definition for `rl_chess::models::index::Format` model
        Format: (() => {
            return defineComponent(
                world,
                {
                    format_id: RecsType.Number,
                    description: RecsType.BigInt,
                    turn_expiry: RecsType.Number,
                    total_time_per_side: RecsType.Number,
                    total_time_string: RecsType.BigInt,
                    increment: RecsType.Number,
                    available: RecsType.Boolean,
                },
                {
                    metadata: {
                        namespace: "rl_chess",
                        name: "Format",
                        types: ["u16", "felt252", "u64", "u64", "felt252", "u8", "bool"],
                        customTypes: [],
                    },
                }
            );
        })(),
    };
}
